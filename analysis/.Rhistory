radius0, radiusN,
radiusCooling, scale0, scaleN,
scaleCooling,
kernelType, mapType, gridType, compactSupport, neighborhood, codebook)
# Convert To Kohonen Object for Plotting
pickup_sommap <- Rsomoclu.kohonen(pickup_input_data, pickup_res)
dropoff_sommap <- Rsomoclu.kohonen(dropoff_input_data, dropoff_res)
# Cluster Centers
pickup_centers <- as.data.frame(pickup_sommap$codes)
pickup_centers[,1] <- pickup_centers[,1] * (max_long - min_long) + min_long
pickup_centers[,2] <- pickup_centers[,2] * (max_lat - min_lat) + min_lat
dropoff_centers <- as.data.frame(dropoff_sommap$codes)
dropoff_centers[,1] <- dropoff_centers[,1] * (max_long - min_long) + min_long
dropoff_centers[,2] <- dropoff_centers[,2] * (max_lat - min_lat) + min_lat
manhattan <- get_map(location="Manhattan", zoom=12)
ggmap(manhattan, extent="device") +
geom_point(data=pickup_centers, aes(x=V1, y=V2, color='red')) +
geom_point(data=dropoff_centers, aes(x=V1, y=V2)) +
theme(legend.position="none")
library(Rsomoclu)
library(kohonen)
library(RPostgreSQL)
library(ggmap)
library(dplyr)
con = dbConnect(dbDriver("PostgreSQL"), dbname = "nyc-taxi-data", host = "localhost")
query = function(sql) { fetch(dbSendQuery(con, sql), n = 1e8) }
# Roughly 150,000 rows
sampled_trips <- query("SELECT * FROM trips TABLESAMPLE BERNOULLI(0.1)")
times <- sampled_trips$pickup_datetime %>% strptime("%Y-%m-%d %H:%M:%S")
times <- as.numeric(format(times, "%H")) + as.numeric(format(times, "%M"))/60 + as.numeric(format(times, "%S"))/3600
sampled_trips <- mutate(sampled_trips, pickup_time = times)
late_night_trips <- sampled_trips %>% filter(pickup_time < 4 & trip_distance > 1)
sampled_trips <- late_night_trips
pickup_locations <- na.omit(sampled_trips[c('pickup_longitude', 'pickup_latitude')])
dropoff_locations <- na.omit(sampled_trips[c('dropoff_longitude', 'dropoff_latitude')])
# Bounding Box for New York
min_lat <- 40.5774
max_lat <- 40.9176
min_long <- -74.15
max_long <- -73.7004
# Filtered Pickup and Dropoff Locations
pickup_locations <- pickup_locations %>%
filter(pickup_longitude >= min_long && pickup_longitude <= max_long && pickup_latitude <= max_lat && pickup_latitude >= min_lat)
dropoff_locations <- dropoff_locations %>%
filter(dropoff_longitude >= min_long && dropoff_longitude <= max_long && dropoff_latitude <= max_lat && dropoff_latitude >= min_lat)
# Normalize Pickup and Dropoff Locations
pickup_locations[,1] <- (pickup_locations[,1] - min_long) / (max_long - min_long)
pickup_locations[,2] <- (pickup_locations[,2] - min_lat) / (max_lat - min_lat)
dropoff_locations[,1] <- (dropoff_locations[,1] - min_long) / (max_long - min_long)
dropoff_locations[,2] <- (dropoff_locations[,2] - min_lat) / (max_lat - min_lat)
pickup_input_data <- matrix(c(pickup_locations$pickup_longitude, pickup_locations$pickup_latitude), ncol=2)
dropoff_input_data <- matrix(c(dropoff_locations$dropoff_longitude, dropoff_locations$dropoff_latitude), ncol=2)
nSomX <- 5
nSomY <- 10
nEpoch <- 200
radius0 <- 3
radiusN <- 1
radiusCooling <- "linear"
scale0 <- 1.0
scaleN <- 0.01
scaleCooling <- "linear"
kernelType <- 0
mapType <- "planar"
gridType <- "rectangular"
compactSupport <- FALSE
#codebook <- input_data[sample(nrow(input_data), nSomX * nSomY), ]
codebook <- NULL
neighborhood <- "gaussian"
pickup_res <- Rsomoclu.train(pickup_input_data, nEpoch, nSomX, nSomY,
radius0, radiusN,
radiusCooling, scale0, scaleN,
scaleCooling,
kernelType, mapType, gridType, compactSupport, neighborhood, codebook)
dropoff_res <- Rsomoclu.train(dropoff_input_data, nEpoch, nSomX, nSomY,
radius0, radiusN,
radiusCooling, scale0, scaleN,
scaleCooling,
kernelType, mapType, gridType, compactSupport, neighborhood, codebook)
# Convert To Kohonen Object for Plotting
pickup_sommap <- Rsomoclu.kohonen(pickup_input_data, pickup_res)
dropoff_sommap <- Rsomoclu.kohonen(dropoff_input_data, dropoff_res)
# Cluster Centers
pickup_centers <- as.data.frame(pickup_sommap$codes)
pickup_centers[,1] <- pickup_centers[,1] * (max_long - min_long) + min_long
pickup_centers[,2] <- pickup_centers[,2] * (max_lat - min_lat) + min_lat
dropoff_centers <- as.data.frame(dropoff_sommap$codes)
dropoff_centers[,1] <- dropoff_centers[,1] * (max_long - min_long) + min_long
dropoff_centers[,2] <- dropoff_centers[,2] * (max_lat - min_lat) + min_lat
manhattan <- get_map(location="Manhattan", zoom=12)
ggmap(manhattan, extent="device") +
geom_point(data=pickup_centers, aes(x=V1, y=V2, color='red')) +
geom_point(data=dropoff_centers, aes(x=V1, y=V2)) +
theme(legend.position="none")
library(clusterSim)
install.packages('clusterSim')
library(clusterSim)
data(data_ratio)
cl1 <- pam(data_ratio, 4)
d<-dist(data_ratio)
print(index.DB(data_ratio, cl1$clustering,d, centrotypes="medoids"))
library(clusterSim)
install.packages("clusterSim")
library(clusterSim)
library(clusterSim)
install.packages("clusterSim")
library(clusterSim)
library(clusterSim)
install.packages('rgl')
library(clusterSim)
library(clusterSim)
library(clusterSim)
library(clusterSim)
data(data_ratio)
cl1 <- pam(data_ratio, 4)
d<-dist(data_ratio)
print(index.DB(data_ratio, cl1$clustering,d, centrotypes="medoids"))
data(data_ratio)
cl1 <- pam(data_ratio, 4)
library(Rsomoclu)
library(kohonen)
library(RPostgreSQL)
library(clusterSim)
con = dbConnect(dbDriver("PostgreSQL"), dbname = "nyc-taxi-data", host = "localhost")
query = function(sql) { fetch(dbSendQuery(con, sql), n = 1e8) }
# Roughly 15,000 rows
sampled_trips <- query("SELECT * FROM trips TABLESAMPLE BERNOULLI(0.01)")
pickup_locations <- na.omit(sampled_trips[c('pickup_longitude', 'pickup_latitude')])
dropoff_locations <- na.omit(sampled_trips[c('dropoff_longitude', 'dropoff_latitude')])
pickup_locations
library(rgdal)
install.packages('rgdal')
install.packages('rgeos')
library(rgdal)
library(rgeos)
setwd("~/Desktop/CMSC828E/project/nyc-taxi-data/analysis")
shape <- readShapePoints("~/nybb_16a/nybb.shp")
library(rgeos)
library(rgdal)
shape <- readShapePoints("~/nybb_16a/nybb.shp")
library(maptools)
install.packages(maptools)
install.packages('maptools)
install.packages('maptools')
library(maptools)
area <- readShapePoly(file.choose())
install.packages("RColorBrewer")
library(RColorBrewer)
colors <- brewer.pal(9, "BuGn")
library(ggmap)
mapImage <- get_map(location = c(lon = -74, lat = 37.5),
color = "color",
source = "osm",
# maptype = "terrain",
zoom = 6)
area.points <- fortify(area)
ggmap(mapImage) +
geom_polygon(aes(x = long,
y = lat,
group = group),
data = area.points,
color = colors[9],
fill = colors[6],
alpha = 0.5) +
labs(x = "Longitude",
y = "Latitude")
mapImage <- get_map(location = c(lon = -74, lat = 37.5),
+                     color = "color",
+                     source = "osm",
+                     # maptype = "terrain",
+                     zoom = 12)
manhattan <- get_map(location="Manhattan", zoom=11)
ggmap(manhattan) +
geom_polygon(aes(x = long,
y = lat,
group = group),
data = area.points,
color = colors[9],
fill = colors[6],
alpha = 0.5) +
labs(x = "Longitude",
y = "Latitude")
area.points
head(area.points)
area <- readShapePoly(file.choose())
area
utah = readOGR(dsn=".", layer="eco_l3_ut")
nyc = readOGR(dsn=".", layer="nycbb")
nyc = readOGR(dsn=".", layer="~/nybb_16a/nybb")
nyc = readOGR(dsn=".", layer="nybb_16a/nybb")
ls
nyc = readOGR(dsn=".", layer="nybb_16a/nybb")
nyc <- readOGR('data/nybb_16a', 'nybb')
nyc <- readOGR('nybb_16a', 'nybb')
print(proj4string(nyc))
plot(nyc, axes=TRUE, border="gray")
plot(nyc, axes=TRUE, border="gray")
nyc
head(nyc)
over(pickup_centers,as(nyc,"SpatialPolygons"))
library(sp)
over(pickup_centers,as(nyc,"SpatialPolygons"))
names(nyc)
nyc$BoroName
nyc$BoroName == Manhattan
nyc$BoroName == "Manhattan"
nyc
nyc.polygons
nyc$polygons
polygons(nyc)
nyc@polygons
nyc@polygons[["Manhattan"]]
nyc@polygons[[1]]
plot(nyc@polygons[[1]], axes=TRUE, border="gray")
nyc$BoroName == 'Manhattan'
nyc[nyc$BoroName == 'Manhattan',]
plot(nyc[nyc$BoroName == 'Manhattan',], axes=TRUE, border="gray")
plot(nyc[nyc$BoroName == 'Manhattan' | nyc$BoroName == 'Brooklyn',], axes=TRUE, border="gray")
point <- data.frame(lon=10.2, lat=51.7)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
point <- data.frame(lon=-74, lat=40)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
point <- data.frame(lon=-74, lat=40.6)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
point <- data.frame(lon=-74, lat=40.7)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
point <- data.frame(lon=-73.96, lat=40.771)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
point <- data.frame(lon=-73.9648, lat=40.771)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
point <- data.frame(lon=-73.96, lat=40.77)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
nyc <- spTransform(nyc, CRS("+proj=longlat +datum=WGS84"))
point <- data.frame(lon=-73.96, lat=40.77)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
point <- data.frame(lon=-74.96, lat=40.77)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
point <- data.frame(lon=-73.96, lat=40.77)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc,sp2)
point <- data.frame(lon=-73.96, lat=40.77)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc[nyc$BoroName == 'Manhattan',], sp2)
point <- data.frame(lon=-73.96, lat=40.77)
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc[nyc$BoroName == 'Brooklyn',], sp2)
sp2
sp3 <- SpatialPoints(pickup_locations,proj4string=CRS(proj4string(nyc)))
gContains(nyc[nyc$BoroName == 'Manhattan',], sp3)
sp3
point <- data.frame(lon=c(-73.96,1), lat=c(40.77,3))
point
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc[nyc$BoroName == 'Manhattan',], sp2)
sp2
gContains(nyc[nyc$BoroName == 'Manhattan',], sp2[1,])
gContains(nyc[nyc$BoroName == 'Manhattan',], sp2[2,])
apply(sp2, 1, function(x) gContains(nyc[nyc$BoroName == 'Manhattan', ], x))
apply(sp2, 2, function(x) gContains(nyc[nyc$BoroName == 'Manhattan', ], x))
apply(sp2, 2, function(x) print(x))
apply(sp2, 1, function(x) print(x))
sp2
size(sp2)
len(sp2)
sapply(sp2, function(x) print(x))
is.nan(sp2[1,])
is.na(sp2[1,])
any(sp2[1,])
any(sp2[1,] > 0)
sp2[1,]
sp2[1,] == Null
sp2[1,] == c()
sapply(sp2, function(x) x == c())
rapply(sp2, function(x) x == c())
lapply(sp2, function(x) x == c())
nyc[nyc$BoroName == 'Manhattan',]@plotOrder
nyc[nyc$BoroName == 'Manhattan',]@polygons
library(maps)
library(maptools)
library(spatstat)
library(rgeos)
counties <- map('county', c('maryland,carroll', 'maryland,frederick',
'maryland,montgomery', 'maryland,howard'),
fill=TRUE, plot=FALSE)
# fill=TRUE is necessary for converting this map object to SpatialPolygons
countries <- gUnaryUnion(map2SpatialPolygons(counties, IDs=counties$names,
proj4string=CRS("+proj=longlat +datum=WGS84")))
W <- as(countries, "owin")
install.packages('spatstat')
install.packages('rgeos')
library(maps)
library(maptools)
library(spatstat)
library(rgeos)
counties <- map('county', c('maryland,carroll', 'maryland,frederick',
'maryland,montgomery', 'maryland,howard'),
fill=TRUE, plot=FALSE)
# fill=TRUE is necessary for converting this map object to SpatialPolygons
countries <- gUnaryUnion(map2SpatialPolygons(counties, IDs=counties$names,
proj4string=CRS("+proj=longlat +datum=WGS84")))
W <- as(countries, "owin")
X <- ppp(x=c(-77.208703, -77.456582, -77.090600,  -77.035668, -77.197144),
y=c(39.188603, 39.347019, 39.672818, 39.501898, 39.389203), window = W)
y <- dirichlet(X) # Dirichlet tesselation
plot(y) # Plot tesselation
plot(X, add = TRUE) # Add points
tile.areas(y) #Areas
class(nyc)
library(clusterSim)
data(data_ratio)
cl1 <- pam(data_ratio, 4)
d<-dist(data_ratio)
print(index.DB(data_ratio, cl1$clustering,d, centrotypes="medoids"))
data_ratio
cl1$clustering
d
library(stats)
df <- data.frame(x=c(1,2,3), y=c(1,2,3))
dist(rbind(x2, x2))
dist(rbind(c(1,2), c(1,2)))
dist(rbind(c(1,2), c(1,3)))
rapply(dropoff_centers, function(x) dist(rbind(x, c(1,1))))
lapply(dropoff_centers, function(x) dist(rbind(x, c(1,1))))
lapply(dropoff_centers, function(x) print(x))
rapply(dropoff_centers, function(x) print(x))
sapply(dropoff_centers, function(x) print(x))
dropoff_centers
apply(dropoff_centers, function(x) print(x))
apply(dropoff_centers, 1, function(x) print(x))
apply(dropoff_centers, 1, function(x) dist(rbind(x, c(1,1))))
min(apply(dropoff_centers, 1, function(x) dist(rbind(x, c(1,1)))))
apply(dropoff_centers, 1, function(x) dist(rbind(x, c(1,1))))
which.min(apply(dropoff_centers, 1, function(x) dist(rbind(x, c(1,1)))))
which.min(apply(dropoff_centers, 1, function(x) dist(rbind(x, c(2,2)))))
which.min(apply(dropoff_centers, 1, function(x) dist(rbind(x, c(100,100)))))
which.min(apply(dropoff_centers, 1, function(x) dist(rbind(x, c(100,100)))))
cluster_ids <- apply(pickup_locations, 1, function(point) {
which.min(apply(dropoff_centers, 1, function(center) dist(rbind(center, point))))
})
cluster_ids
class(cluster_ids)
cluster_ids[1]
cluster_ids[2]
pickup_locations
cbind(c(1,2), c(3,4))
rbind(c(1,2), c(3,4))
concat(c(1,2), c(3,4))
append(c(1,2), c(3,4))
c(1,2)
pickup_locations <- na.omit(sampled_trips[c('pickup_longitude', 'pickup_latitude')])
dropoff_locations <- na.omit(sampled_trips[c('dropoff_longitude', 'dropoff_latitude')])
all_locations <- data.frame(longitude=append(pickup_locations$pickup_longitude, dropoff_locations$dropoff_longitude),
latitude=append(pickup_locations$pickup_latitude, dropoff_locations$dropoff_latitude))
all_locations
all_locations[1,]
sp2   <- SpatialPoints(all_locations[1,],proj4string=CRS(proj4string(nyc)))
gContains(nyc[nyc$BoroName == 'Manhattan',], sp2[1,])
apply(all_locations, 1, function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
apply(all_locations, 1, function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
manhattan <- nyc[nyc$BoroName == 'Manhttan',]
# Filter out non-Manhattan points
apply(all_locations, 1, function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
sp2   <- SpatialPoints(all_locations[1,],proj4string=CRS(proj4string(nyc)))
gContains(nyc[nyc$BoroName == 'Manhattan',], sp2[1,])
apply(all_locations,1,function(p) print(p))
apply(all_locations,1,function(p) print(p))
point <- data.frame(longitude=c(-73.96), latitude=c(40.77))
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc[nyc$BoroName == 'Manhattan',], sp2[1,])
point <- data.frame(longitude=c(-73.96), latitude=c(40.77))
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(nyc)))
gContains(nyc[nyc$BoroName == 'Manhattan',], sp2[1,])
point <- data.frame(longitude=c(-73.96), latitude=c(40.77))
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp2[1,])
manhattan
manhattan <- nyc[nyc$BoroName == 'Manhttan',]
manhattan
manhattan <- nyc[nyc$BoroName == 'Manhattan',]
apply(all_locations, 1, function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
point <- data.frame(longitude=c(-73.96), latitude=c(40.77))
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(manhattan)))
gContains(nyc[nyc$BoroName == 'Manhattan',], sp2[1,])
point <- data.frame(longitude=c(-73.96), latitude=c(40.77))
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp2[1,])
point <- data.frame(longitude=c(-74.96), latitude=c(40.77))
sp2   <- SpatialPoints(point,proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp2[1,])
apply(all_locations, 1, function(point) {
sp1 <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp1[1,])
})
all_locations
apply(all_locations, 1, function(point) {
sp1 <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp1[1,])
})
apply(all_locations, 1, function(point) {
sp1 <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp1[1,])
})
apply(all_locations, 1, function(point) {
sp1 <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp1[1,])
})
apply(all_locations, 1, function(point) {
sp1 <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp1[1,])
})
point <- data.frame(longitude=c(-74.96), latitude=c(40.77))
class(point)
class(c(-74.96))
class(all_locations)
class(all_locations[1,])
class(all_locations[1,1])
apply(all_locations, 1, function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
apply(all_locations, 1, function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(nyc)))
gContains(nyc, sp[1,])
})
apply(all_locations, 1, function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
print("here")
gContains(manhattan, sp[1,])
})
sp <- SpatialPoints(all_locations[1,], proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
sp <- SpatialPoints(all_locations[2,], proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
sp <- SpatialPoints(all_locations[3,], proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
sp <- SpatialPoints(all_locations[4,], proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
coordinates(c(1,2))
library(Rsomoclu)
library(kohonen)
library(RPostgreSQL)
library(clusterSim)
library(rgdal)
library(rgeos)
apply(all_locations, 1, function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
apply(all_locations, 1, function(point) {
library(rgdal)
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
apply(all_locations, 1, function(point) {
library(rgeos)
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
apply(all_locations, 1, function(point) {
library(sp)
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
function contains(point) {}
contains <- function(point) {}
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
contains <- function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
}
contains(all_locations[1,])
contains(all_locations[2,])
apply(all_locations, 1, function(point) {
contains(point)
})
help.search('coordinates', fields='name')
con = dbConnect(dbDriver("PostgreSQL"), dbname = "nyc-taxi-data", host = "localhost")
query = function(sql) { fetch(dbSendQuery(con, sql), n = 1e8) }
# Roughly 15,000 rows
sampled_trips <- query("SELECT * FROM trips TABLESAMPLE BERNOULLI(0.01)")
all_locations <- na.omit(data.frame(longitude=append(sampled_trips$pickup_longitude, sampled_trips$dropoff_longitude),
latitude=append(sampled_trips$pickup_latitude, sampled_trips$dropoff_latitude)))
any(is.na(all_locations))
nyc <- readOGR('nybb_16a', 'nybb')
nyc <- spTransform(nyc, CRS("+proj=longlat +datum=WGS84"))
manhattan <- nyc[nyc$BoroName == 'Manhattan',]
apply(all_locations, 1, function(point) {
sp <- SpatialPoints(point, proj4string=CRS(proj4string(manhattan)))
gContains(manhattan, sp[1,])
})
clear
